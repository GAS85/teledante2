#logging
#logoutput: stderr
logoutput: /var/log/socks.log
#debug: 1

#server address specification
internal: 192.168.0.2 port = 1080
external: 192.168.0.2


#server identities (not needed on solaris)
#user.privileged: root

#YOU NEED TO CREATE THIS USER IN A SYSTEM
user.notprivileged: telegram

#user.libwrap       : libwrap

#authentication methods
clientmethod: none
method: username

##
## SOCKS client access rules
##
#rule processing stops at the first match, no match results in blocking

#block access to socks server from 192.0.2.22
# client block {
#        #block connections from 192.0.2.22/32
#        from: 192.0.2.22/24 to: 0.0.0.0/0
#        log: error # connect disconnect
# }

#allow connections from local network (192.0.2.0/24)
client pass {
	from: 0.0.0.0/0 to: 0.0.0.0/0
	log: error # connect disconnect
}

##
## SOCKS command rules
##
#rule processing stops at the first match, no match results in blocking

# deny proxied to lo
block {
    from: 0.0.0.0/0 to: 127.0.0.0/8
    log: error
}

# deny binding
block {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    command: bind
    log: error
}

#91.108.4.0/22
#91.108.8.0/22
#91.108.12.0/22
#91.108.16.0/22
#91.108.56.0/22
#91.108.56.0/23
#91.108.56.0/24
#149.154.160.0/20
#149.154.160.0/22
#149.154.164.0/22
#149.154.168.0/22
#149.154.168.0/23
#149.154.170.0/23

pass {
    from: 0.0.0.0/0 to: 91.108.4.0/22
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 91.108.8.0/22
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 91.108.12.0/22
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 91.108.16.0/22
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 91.108.56.0/22
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 149.154.160.0/20
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 149.154.164.0/20
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 149.154.168.0/20
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: 149.154.170.0/20
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: .telegram.org
    log: connect disconnect error
    method: username
}
pass {
    from: 0.0.0.0/0 to: .t.me
    log: connect disconnect error
    method: username
}

#Forward traffic to next proxy

#forwarding route to SOCKS server (which supports both SOCKS version 4 and 5)
#route {                                                                        
#	from: 0.0.0.0/0 to: 0.0.0.0/0 via: YOURproxy.com port = 1080            
#	proxyprotocol: socks_v5
#	command: connect
#	protocol: tcp #udp not supported
#	method: username
# NOTE: User name should be tha seme as for forwardning (YOURproxy.com) proxy - authenticated once.
#}

#forwarding route to HTTP proxy
#route {                                                                        
#        from: 0.0.0.0/0 to: 0.0.0.0/0 via: 192.168.0.2 port = 3128
#        proxyprotocol: http_v1.0
#	command: connect
#}

# deny the rest
block {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: error
}
